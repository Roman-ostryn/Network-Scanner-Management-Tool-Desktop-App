<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:helpers="clr-namespace:SC.AgentDeployer.Client.Helpers" xmlns:system="clr-namespace:System;assembly=mscorlib">
  <Color x:Key="Background.White">#FFFFFFFF</Color>
  <Color x:Key="Background.Light">#FFF2F2F2</Color>
  <Color x:Key="Background.LightGray">#FFF5F5F5</Color>
  <Color x:Key="Background.Medium">#FFEAEAEA</Color>
  <Color x:Key="Background.Hover">#8887CEEB</Color>
  <Color x:Key="Border.Light">#FFD3D3D3</Color>
  <Color x:Key="Border.Medium">#FFA9A9A9</Color>
  <Color x:Key="Border.Dark">#FF808080</Color>
  <Color x:Key="Accent.Light">#FFFFFFFF</Color>
  <Color x:Key="Accent.Blue">#FF026CCF</Color>
  <Color x:Key="Accent.Dark">#FF000000</Color>
  <Color x:Key="Text.Light">#FFAAAAAA</Color>
  <Color x:Key="Text.Medium">#FFA9A9A9</Color>
  <Color x:Key="Text.Dark">#FF000000</Color>
  <Color x:Key="Text.Error">#FFFF0000</Color>
  <system:String x:Key="LabelResources.CustomProperty1.Text">Custom Property 1:</system:String>
  <system:String x:Key="LabelResources.CustomProperty2.Text">Custom Property 2:</system:String>
  <system:String x:Key="LabelResources.CustomProperty3.Text">Custom Property 3:</system:String>
  <system:String x:Key="LabelResources.CustomProperty4.Text">Custom Property 4:</system:String>
  <SolidColorBrush x:Key="App.Border.Light" Color="{StaticResource Border.Light}" />
  <SolidColorBrush x:Key="App.Border.Medium" Color="{StaticResource Border.Medium}" />
  <SolidColorBrush x:Key="App.Border.Dark" Color="{StaticResource Border.Dark}" />
  <SolidColorBrush x:Key="App.Background.White" Color="{StaticResource Background.White}" />
  <SolidColorBrush x:Key="App.Background.Light" Color="{StaticResource Background.Light}" />
  <SolidColorBrush x:Key="App.Background.LightGray" Color="{StaticResource Background.LightGray}" />
  <SolidColorBrush x:Key="App.Background.Medium" Color="{StaticResource Background.Medium}" />
  <SolidColorBrush x:Key="App.Background.Hover" Color="{StaticResource Background.Hover}" />
  <SolidColorBrush x:Key="App.Accent.Blue" Color="{StaticResource Accent.Blue}" />
  <SolidColorBrush x:Key="App.Text.Dark" Color="{StaticResource Text.Dark}" />
  <SolidColorBrush x:Key="App.Text.Medium" Color="{StaticResource Text.Medium}" />
  <SolidColorBrush x:Key="App.Text.Light" Color="{StaticResource Text.Light}" />
  <SolidColorBrush x:Key="App.Text.Error" Color="{StaticResource Text.Error}" />
  <SolidColorBrush x:Key="CheckMark.UnChecked.Background" Color="{StaticResource Accent.Light}" />
  <SolidColorBrush x:Key="CheckMark.UnChecked.Border" Color="{StaticResource Border.Dark}" />
  <SolidColorBrush x:Key="CheckMark.UnChecked.Glyph" Color="{StaticResource Accent.Light}" />
  <SolidColorBrush x:Key="CheckMark.Checked.Background" Color="{StaticResource Accent.Blue}" />
  <SolidColorBrush x:Key="CheckMark.Checked.Border" Color="{StaticResource Accent.Blue}" />
  <SolidColorBrush x:Key="CheckMark.Checked.Glyph" Color="{StaticResource Accent.Light}" />
  <SolidColorBrush x:Key="CheckMark.Pressed.Background" Color="{StaticResource Accent.Blue}" />
  <SolidColorBrush x:Key="CheckMark.Pressed.Border" Color="{StaticResource Accent.Blue}" />
  <SolidColorBrush x:Key="CheckMark.MouseOver.Background" Color="{StaticResource Accent.Light}" />
  <SolidColorBrush x:Key="CheckMark.MouseOver.Border" Color="{StaticResource Accent.Blue}" />
  <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="{StaticResource CheckMark.UnChecked.Background}" />
    <Setter Property="BorderBrush" Value="{StaticResource CheckMark.UnChecked.Border}" />
    <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid Name="templateRoot" Background="#00FFFFFF" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border Name="checkBoxBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="0" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" CornerRadius="2" Width="16" Height="16">
              <Grid Name="markGrid">
                <Path Name="checkBox" Data="F1 M9.97498,1.22334 L4.6983,9.09834 L4.52164,9.09834 L0,5.19331 L1.27664,3.52165 L4.255,6.08833 L8.33331,1.52588E-05 L9.97498,1.22334" Margin="1,2.5,1,2" Opacity="0" Stretch="Fill" Fill="{StaticResource CheckMark.UnChecked.Glyph}" />
                <Rectangle Name="indeterminateMark" Margin="2" Opacity="0" Fill="{StaticResource CheckMark.UnChecked.Glyph}" />
              </Grid>
            </Border>
            <ContentPresenter Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="True">
              <Setter Property="Padding" Value="0,0,0,0" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="checkBoxBorder" Property="Border.Background" Value="{StaticResource CheckMark.MouseOver.Background}" />
              <Setter TargetName="checkBoxBorder" Property="Border.BorderBrush" Value="{StaticResource CheckMark.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="checkBoxBorder" Property="Border.Background" Value="{StaticResource CheckMark.Pressed.Background}" />
              <Setter TargetName="checkBoxBorder" Property="Border.BorderBrush" Value="{StaticResource CheckMark.Pressed.Border}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="checkBoxBorder" Property="Border.Background" Value="{StaticResource CheckMark.Checked.Background}" />
              <Setter TargetName="checkBoxBorder" Property="Border.BorderBrush" Value="{StaticResource CheckMark.Checked.Border}" />
              <Setter TargetName="checkBox" Property="Shape.Fill" Value="{StaticResource CheckMark.Checked.Glyph}" />
              <Setter TargetName="checkBox" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="0" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="{x:Null}">
              <Setter TargetName="checkBoxBorder" Property="Border.Background" Value="{StaticResource CheckMark.UnChecked.Background}" />
              <Setter TargetName="checkBoxBorder" Property="Border.BorderBrush" Value="{StaticResource CheckMark.UnChecked.Border}" />
              <Setter TargetName="checkBox" Property="Shape.Fill" Value="{StaticResource CheckMark.UnChecked.Glyph}" />
              <Setter TargetName="checkBox" Property="UIElement.Opacity" Value="0" />
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="App.ButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="BorderBrush" Value="{StaticResource App.Border.Dark}" />
    <Setter Property="Background" Value="{StaticResource App.Background.Medium}" />
    <Setter Property="Foreground" Value="{StaticResource App.Text.Dark}" />
    <Setter Property="Padding" Value="5,2,5,2" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
  </Style>
  <Style x:Key="App.Button.BorderlessStyle" TargetType="{x:Type Button}">
    <Setter Property="BorderBrush" Value="{StaticResource App.Background.White}" />
    <Setter Property="Background" Value="{StaticResource App.Background.White}" />
    <Setter Property="Foreground" Value="{StaticResource App.Text.Dark}" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Height" Value="18" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Background" Value="{StaticResource App.Background.Light}" />
        <Setter Property="BorderBrush" Value="{StaticResource App.Background.Light}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{StaticResource App.Text.Light}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="App.NestedButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Margin" Value="5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="border" BorderThickness="0" Padding="4,2" BorderBrush="{DynamicResource App.Border.Medium}" CornerRadius="3" Background="{TemplateBinding Control.Background}">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Border.BorderBrush" Value="#00FFFFFF" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="App.Button.DropDownStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{StaticResource App.Background.White}" />
    <Setter Property="BorderBrush" Value="{StaticResource App.Background.White}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Background" Value="{StaticResource App.Background.Medium}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{StaticResource App.Background.LightGray}" />
        <Setter Property="BorderBrush" Value="{StaticResource App.Border.Medium}" />
        <Setter Property="Foreground" Value="{StaticResource App.Text.Light}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="App.Button.DropDownArrowStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{StaticResource App.Background.White}" />
    <Setter Property="BorderBrush" Value="{StaticResource App.Background.White}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{StaticResource App.Background.LightGray}" />
        <Setter Property="BorderBrush" Value="{StaticResource App.Border.Medium}" />
        <Setter Property="Foreground" Value="{StaticResource App.Text.Light}" />
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Background" Value="{StaticResource App.Background.Hover}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="App.Button.Icon" TargetType="{x:Type Image}">
    <Setter Property="UIElement.Opacity" Value="1.0" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.3" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="App.Button.Path" TargetType="{x:Type Path}">
    <Setter Property="UIElement.Opacity" Value="1.0" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.3" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="App.DataGrid" TargetType="{x:Type DataGrid}">
    <Setter Property="DataGrid.ColumnHeaderStyle" Value="{DynamicResource App.DataGrid.Column.HeaderStyle}" />
    <Setter Property="DataGrid.CellStyle" Value="{DynamicResource App.DataGrid.CellStyle}" />
    <Setter Property="DataGrid.RowStyle" Value="{DynamicResource App.DataGrid.RowStyle}" />
  </Style>
  <Style x:Key="App.DataGrid.Column.HeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
    <Setter Property="MinWidth" Value="130" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="Padding" Value="2,0,0,0" />
    <Setter Property="BorderThickness" Value="0,0,0,2" />
    <Setter Property="BorderBrush" Value="{StaticResource App.Border.Light}" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="DemiBold" />
    <Setter Property="Foreground" Value="{StaticResource App.Accent.Blue}" />
    <Setter Property="Background" Value="{StaticResource App.Background.White}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
  </Style>
  <Style x:Key="App.DataGrid.CellStyle" TargetType="{x:Type DataGridCell}">
    <Setter Property="Padding" Value="0" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="FontWeight" Value="DemiBold" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Foreground" Value="{StaticResource App.Text.Dark}" />
    <Setter Property="Background" Value="{StaticResource App.Background.White}" />
    <Setter Property="MinHeight" Value="35" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridCell}">
          <Border Background="#00FFFFFF" BorderThickness="0">
            <Border Name="border" BorderThickness="0,0,0,0" BorderBrush="{StaticResource App.Border.Medium}" Background="{StaticResource App.Background.White}">
              <ContentPresenter VerticalAlignment="Center" />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Value="true" Binding="{Binding Path=IsSelected}">
              <Setter TargetName="border" Property="Border.Background" Value="{StaticResource App.Background.Medium}" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="App.DataGrid.RowStyle" TargetType="{x:Type DataGridRow}">
    <Setter Property="Padding" Value="0" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="BorderThickness" Value="0,0,0,0" />
    <Setter Property="BorderBrush" Value="{StaticResource App.Border.Medium}" />
    <Setter Property="Background" Value="{StaticResource App.Background.White}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="App.ComboBoxStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="BorderBrush" Value="{StaticResource App.Border.Dark}" />
    <Setter Property="Background" Value="{StaticResource App.Background.White}" />
    <Setter Property="Foreground" Value="{StaticResource App.Text.Dark}" />
    <Setter Property="Padding" Value="5,2,5,2" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
  </Style>
  <Style x:Key="App.TextBlock.Title" TargetType="{x:Type TextBlock}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="DemiBold" />
    <Setter Property="Foreground" Value="{StaticResource App.Text.Dark}" />
    <Setter Property="Margin" Value="5,5,5,2" />
  </Style>
  <Style x:Key="App.TextBlock.Value" TargetType="{x:Type TextBlock}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="Regular" />
    <Setter Property="Foreground" Value="{StaticResource App.Text.Medium}" />
    <Setter Property="Margin" Value="5,0,5,5" />
  </Style>
  <Style x:Key="App.TextBox.Readonly.Value" TargetType="{x:Type TextBox}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="Regular" />
    <Setter Property="Foreground" Value="{StaticResource App.Text.Medium}" />
    <Setter Property="Margin" Value="5,0,5,5" />
    <Setter Property="TextBoxBase.IsReadOnly" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="App.TextBox.Editable.Value" TargetType="{x:Type TextBox}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="Regular" />
    <Setter Property="Foreground" Value="{StaticResource App.Text.Dark}" />
    <Setter Property="Margin" Value="5,0,5,3" />
    <Setter Property="BorderThickness" Value="1" />
  </Style>
  <Style x:Key="App.LoadingIndicatorStyle" TargetType="{x:Type helpers:LoadingIndicator}">
    <Setter Property="Foreground" Value="{StaticResource App.Accent.Blue}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Width" Value="40" />
    <Setter Property="Height" Value="40" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type helpers:LoadingIndicator}">
          <Border Name="PART_Border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="SizeStates">
                <VisualState x:Name="Large" />
                <VisualState x:Name="Small" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ActiveStates">
                <VisualState x:Name="Inactive" />
                <VisualState x:Name="Active">
                  <Storyboard SpeedRatio="{TemplateBinding helpers:LoadingIndicator.SpeedRatio}">
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas0" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:3.000" Value="360" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas1" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:2.000" Value="-360" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <FrameworkElement.Resources>
              <ResourceDictionary>
                <Style x:Key="{x:Type Canvas}" TargetType="{x:Type Canvas}">
                  <Setter Property="UIElement.RenderTransformOrigin" Value="0.5,0.5" />
                  <Setter Property="RenderTransform">
                    <Setter.Value>
                      <RotateTransform />
                    </Setter.Value>
                  </Setter>
                </Style>
              </ResourceDictionary>
            </FrameworkElement.Resources>
            <Grid Background="#00FFFFFF">
              <UIElement.RenderTransform>
                <TransformGroup>
                  <ScaleTransform ScaleX="0.5" ScaleY="0.5" />
                  <TranslateTransform X="10" Y="10" />
                </TransformGroup>
              </UIElement.RenderTransform>
              <Canvas Name="PART_Canvas0" Opacity="1.0">
                <Path Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="10">
                  <Path.Data>
                    <PathGeometry>
                      <Geometry.Transform>
                        <TranslateTransform X="20" Y="-20" />
                      </Geometry.Transform>
                      <PathGeometry.Figures>
                        <PathFigureCollection>
                          <PathFigure StartPoint="0,0">
                            <PathFigure.Segments>
                              <PathSegmentCollection>
                                <ArcSegment Size="40,40" IsLargeArc="True" SweepDirection="CounterClockwise" Point="40,40" />
                              </PathSegmentCollection>
                            </PathFigure.Segments>
                          </PathFigure>
                        </PathFigureCollection>
                      </PathGeometry.Figures>
                    </PathGeometry>
                  </Path.Data>
                </Path>
              </Canvas>
              <Canvas Name="PART_Canvas1" Opacity="0.3">
                <Path Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="10">
                  <Path.Data>
                    <PathGeometry>
                      <Geometry.Transform>
                        <TranslateTransform X="-7" Y="7" />
                      </Geometry.Transform>
                      <PathGeometry.Figures>
                        <PathFigureCollection>
                          <PathFigure StartPoint="0,0">
                            <PathFigure.Segments>
                              <PathSegmentCollection>
                                <ArcSegment Size="30,30" IsLargeArc="True" SweepDirection="Clockwise" Point="40,40" />
                              </PathSegmentCollection>
                            </PathFigure.Segments>
                          </PathFigure>
                        </PathFigureCollection>
                      </PathGeometry.Figures>
                    </PathGeometry>
                  </Path.Data>
                </Path>
              </Canvas>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ItemsPanelTemplate x:Key="MenuItemPanelTemplate">
    <StackPanel Margin="-20,-2,-20,-2" Background="{StaticResource App.Background.White}" />
  </ItemsPanelTemplate>
  <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
    <Setter Property="ItemsPanel" Value="{StaticResource MenuItemPanelTemplate}" />
  </Style>
  <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
    <Setter Property="ItemsPanel" Value="{StaticResource MenuItemPanelTemplate}" />
  </Style>
</ResourceDictionary>